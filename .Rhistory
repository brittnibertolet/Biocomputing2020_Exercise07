install.packages("Hmisc",dependencies=TRUE)
install.packages("MASS",dependencies=TRUE)
install.packages('DAAG')
library(DAAG)
str(seedrates)
plot(seedrates$grain~seedrates$rate,
xlab='Seeding rate',
ylab='Grains per head',
pch=16,cex=1.5)
seeding.lm.E<-lm(grain~poly(rate,4),data=seedrates)
summary(seeding.lm.E)
View(seeding.lm.E)
View(seeding.lm.E)
View(seeding.lm.E)
a<-(1,2,3,4)
a<-c(1,2,3,4)
mean(a)
a
b<-(12,na,3,45)
b<-c(12,na,3,45)
b<-c(12,NA,3,45)
mean(b,na.rm = TRUE)
challenge<-c("Jordan","Molly","Ghislain","Megan","ana")
challenge[3]
setwd("~/Documents/biocomputing/data/")
#Loops in R
a <- 1:10
b<-1:10
res
for (i in seq_along(a)) {res[i] <- a[i] + b[i]}
res <- numeric(length = length(a))
for (i in seq_along(a)) {res[i] <- a[i] + b[i]}
res
#Loops in R
#apply - apply over the margins of an array (e.g. the rows or columns of a matrix)
#lapply - apply over an object and return list
#sapply - apply over an object and return a simplified object (an array) if possible
#vapply - similar to sapply but you specify the type of object returned by the iterations
sapply(filenames,FUN=analyze)
#output file
write.table(sortedchallenge1, "sortedUniqueWages.txt",col.names = FALSE,row.names = FLASE,sep = " ", quote = FALSE)
setwd("~/Documents/biocomputing/data/")
#output file
write.table(sortedchallenge1, "sortedUniqueWages.txt",col.names = FALSE,row.names = FLASE,sep = " ", quote = FALSE)
# Set your working directory to that location
setwd("~/Documents/Biocomputing/Lecture 19 /")
#output file
write.table(sortedchallenge1, "sortedUniqueWages.txt",col.names = FALSE,row.names = FLASE,sep = " ", quote = FALSE)
# Load wages.csv
# Remember: "stringsAsFactors" argument prevents strings from
# being treated as factors
wages=read.csv(file="wages.csv", header=TRUE, stringsAsFactors=FALSE)
#output file
write.table(sortedchallenge1, "sortedUniqueWages.txt",col.names = FALSE,row.names = FLASE,sep = " ", quote = FALSE)
# We can extract all of the female wage data using square brackets
# Return the rows for "wages" that have "female" in the first column
# Assign those values to the variable "females"
females=wages[wages[,1]=="female", ]
# Return the rows for "wages" that have "female" in the
# column titled "gender"
# Assign those values to the variable "females2"
females2 = wages[wages$gender == "female", ]
# Return observations in "wages" for which the "gender" column
# is "female"
females3 = subset(x = wages, wages$gender == "female")
#Challenge 1
#Return the unique combinations of gender and yearsExperience sorted
#by gender and then by yearsExperience
#select the first two columns
challenge1 <- wages[,c(1:2)]
#Get unique value combinations
uniquechallenge1 <- unique(challenge1)
#Order based on gender then years experience
sortedchallenge1 <- uniquechallenge1[order(uniquechallenge1[,1], uniquechallenge1[,2]),]
#output file
write.table(sortedchallenge1, "sortedUniqueWages.txt",col.names = FALSE,row.names = FLASE,sep = " ", quote = FALSE)
#output file
write.table(sortedchallenge1, "sortedUniqueWages.txt",col.names = FALSE,row.names = FALSE,sep = " ", quote = FALSE)
#Challenge2
sortedchallenge1
#Challenge2
#Return the gender,yearsExperience, and wage for the highest earner
maxEarner<-data[data$wage=max(data$wage),]
#Challenge2
#Return the gender,yearsExperience, and wage for the highest earner
maxEarner<-data[data$wage==max(data$wage)]
#Challenge2
#Return the gender,yearsExperience, and wage for the highest earner
maxEarner<-data[data$wage==max(data$wage),]
#Challenge2
#Return the gender,yearsExperience, and wage for the highest earner
maxEarner <- data[data$wage == max(data$wage),]
#Challenge2
#Return the gender,yearsExperience, and wage for the highest earner
maxEarner <- data[data$wages == max(data$wages),]
#Challenge2
#Return the gender,yearsExperience, and wage for the highest earner
data<-read.csv("wages.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
maxEarner <- data[data$wage == max(data$wage),]
maxEarner
#Return gender,yearsExperience, and the wage for the lowest earner
minEarner <- data[max(data$wage),]
minEarner
#Return gender,yearsExperience, and the wage for the lowest earner
minEarner <- data[data$wage==max(data$wage),]
minEarner
#Return gender,yearsExperience, and the wage for the lowest earner
minEarner <- data[data$wage==max(data$wage),]
minEarner
#Return gender,yearsExperience, and the wage for the lowest earner
minEarner <- data[max(data$wage),]
minEarner
maxEarner <- data[max(data$wage),]
maxEarner
maxEarner <- data[data$wage == max(data$wage),]
#Return gender,yearsExperience, and the wage for the lowest earner
minEarner <- data[data$wage==max(data$wage),]
minEarner
maxEarner
#Return gender,yearsExperience, and the wage for the lowest earner
minEarner <- data[data$wage==min(data$wage),]
maxEarner <- data[data$wage == max(data$wage),]
minEarner
maxEarner
maxEarner <- data[max(data$wage),]
#Return gender,yearsExperience, and the wage for the lowest earner
minEarner <- data[min(data$wage),]
minEarner
maxEarner
maxEarner <- data[max(data$wage),]
#Return gender,yearsExperience, and the wage for the lowest earner
minEarner <- data[min(data$wage),]
minEarner
maxEarner
#print result along with a phrase
print(c("The maximum earner was:", maxEarner[c(1,2,4)]))
print(c("This is the minimum wage earner",minEarner[c(1,2,4)]))
View(uniquechallenge1)
View(sortedchallenge1)
#return the number of females in the top ten earners
sortedwages <- data[order(data$wage,decreasing = TRUE)]
#return the number of females in the top ten earners
sortedwages <- data[order(data$wage,decreasing = TRUE),]
toptenwages <- sortedwages[1:10]
toptenwages <- sortedwages[1:10,]
femalesintopten <- sum(toptenwages$gender=="female")
print(c("The number of females in the top ten earners is", toptenwages))
print(c("The number of females in the top ten earners is", femalesintopten))
paste("There were " ,femalesintopten,"females in the topten earners.", sep="")
paste("There were " ,femalesintopten ,"females in the topten earners.", sep="")
paste("There were " ,femalesintopten, "females in the topten earners.", sep="")
paste("There were " ,femalesintopten, "females in the topten earners.", sep=" ")
paste("There were ",femalesintopten,"females in the topten earners.", sep=" ")
#Challenge 3
# Return the rows for the observations of data when yearsSchool is 12
# Assign to "HSgrands"
HSgrads=data[data$yearsSchool==12,]
# Return the rows for the observations of data when yearsSchool is 16
# Assign to "BSgrands"
BSgrads=data[data$yearsSchool==16,]
# Take the minimum of "HSgrads"
# Assign to "minHSwage"
minHSwage=min(HSgrads$wage)
# Take the minimum of "BSgrads"
# Assign to "minBSwage"
minBSwage=min(BSgrads$wage)
# Take the difference between "minBSwage" and "minHSwage"
# Round the difference to the third decimal place using
# the round function
# Assign to "diff"
diff=round(minBSwage-minHSwage,3)
# Use the "paste" function to print the answer
# Paste the variable "diff" in between the phrases
# "A bachelors degree provides" and "greater minimum wage"
paste("A bachelors degree provides ",diff," greater minimum wage.")
#Challenge 1
#Write R code that replicates the functionality of the head function in Linus
setwd("~/Documents/biocomputing/Biocomputing2020_Exercise07/")
